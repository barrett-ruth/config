local colors = require('colors')
colors.setup('vscode', 'light')

local hi, link, tshi, cs =
    colors.hi, colors.link, colors.tshi, colors[vim.g.colors_name]

hi('CursorLineNr', { fg = cs.black })
hi('Identifier', { fg = cs.black })
hi('Keyword', { fg = cs.blue })
hi('LineNr', { fg = cs.grey })
hi('MatchParen', { reverse = true })
hi('Normal', { fg = cs.black, bg = cs.white })
link('Normal', 'NonText')
hi('PreProc', { fg = cs.blue })
hi('Search', { reverse = true })
link('Search', 'IncSearch')
hi('Title', { fg = cs.dark_red, bold = true })

hi('Pmenu', { bg = cs.white })
hi('PmenuSel', { bg = cs.light_grey })
link('PmenuSel', 'CmpItemKind')

tshi('Boolean', { fg = cs.blue })
tshi('Comment', { fg = cs.green })
hi('@conditional', { fg = cs.blue })
hi('@conditional.ternary', { fg = cs.black })
hi('@constant', { fg = cs.black })
hi('@constant.builtin', { fg = cs.dark_red })
tshi('Function', { fg = cs.black }, { '@function.builtin' })
hi('@function.macro', { fg = cs.black })
tshi('Include', { fg = cs.blue })
tshi('Label', { fg = cs.black })
tshi('Namespace', { fg = cs.black })
tshi('Number', { fg = cs.light_green })
tshi('Operator', { fg = cs.black })
hi('@punctuation', { fg = cs.black })
tshi('Repeat', { fg = cs.blue })
tshi('String', { fg = cs.red }, { '@character', '@string.escape' })
tshi('Storageclass', { fg = cs.blue })
tshi('Tag', { fg = cs.blue })
hi('@tag.attribute', { fg = cs.black })
hi('@tag.delimiter', { fg = cs.black })
hi('@text.reference', { fg = cs.red })
hi('@text.uri', { fg = cs.black, underline = true })
tshi('Type', { fg = cs.black })
hi('@type.builtin', { fg = cs.blue })
hi('@type.qualifier', { fg = cs.blue })

hi('@lsp.type.class', { fg = cs.black })
hi('@lsp.type.comment', { none = true })
hi('@lsp.type.enumMember', { none = true })
hi('@lsp.type.macro', { fg = cs.blue })
hi('@lsp.type.namespace', { fg = cs.black })
hi('@lsp.mod.deduced', { fg = cs.blue })

hi('NormalFloat', { fg = cs.black, bg = cs.white })
link('NormalFloat', 'LspInfoBorder')
link('NormalFloat', 'NullLsInfoBorder')
link('NormalFloat', 'FzfLuaBorder')
link('NormalFloat', 'FloatBorder')
hi('LspSignatureActiveParameter', { underline = true })

hi('DiagnosticError', { fg = cs.red })
hi('DiagnosticWarn', { fg = cs.yellow })
hi('DiagnosticHint', { fg = cs.green })
hi('DiagnosticInfo', { fg = cs.blue })
hi('DiagnosticUnderlineError', { undercurl = true, special = cs.red })
hi('DiagnosticUnderlineWarn', { undercurl = true, special = cs.yellow })
hi('DiagnosticUnderlineHint', { undercurl = true, special = cs.green })
hi('DiagnosticUnderlineInfo', { undercurl = true, special = cs.blue })
for _, v in ipairs({ 'Error', 'Warn', 'Hint', 'Info' }) do
    link('Diagnostic' .. v, 'DiagnosticFloating' .. v)
    link('Diagnostic' .. v, 'DiagnosticSign' .. v)
end

hi('CmpItemAbbrMatch', { fg = cs.green, bold = true })
hi('CmpItemAbbrMatchFuzzy', { fg = cs.green, bold = true })

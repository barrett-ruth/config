diff --git a/README.md b/README.md
index bb9424f..f835712 100644
--- a/README.md
+++ b/README.md
@@ -31,7 +31,7 @@ Super fast git decorations implemented purely in lua/teal.
 
 ## Requirements
 
-- Neovim >= 0.5.0 
+- Neovim >= 0.5.0
 
   Note: If you are running a development version of Neovim (aka `master`), then breakage may occur if your build is behind latest.
 - Newish version of git. Older versions may not work with some features.
@@ -104,6 +104,7 @@ require('gitsigns').setup {
     virt_text_pos = 'eol', -- 'eol' | 'overlay' | 'right_align'
     delay = 1000,
     ignore_whitespace = false,
+    insert_mode = true,
   },
   current_line_blame_formatter = '<author>, <author_time:%Y-%m-%d> - <summary>',
   sign_priority = 6,
diff --git a/doc/gitsigns.txt b/doc/gitsigns.txt
index 9e8d93e..11c39c0 100644
--- a/doc/gitsigns.txt
+++ b/doc/gitsigns.txt
@@ -56,6 +56,7 @@ of the default settings:
         virt_text_pos = 'eol', -- 'eol' | 'overlay' | 'right_align'
         delay = 1000,
         ignore_whitespace = false,
+        insert_mode = true,
       },
       current_line_blame_formatter = '<author>, <author_time:%Y-%m-%d> - <summary>',
       sign_priority = 6,
@@ -634,7 +635,8 @@ current_line_blame_opts              *gitsigns-config-current_line_blame_opts*
         {
           virt_text = true,
           virt_text_pos = 'eol',
-          delay = 1000
+          delay = 1000,
+          insert_mode = true,
         }
 <
       Options for the current line blame annotation.
diff --git a/lua/gitsigns/config.lua b/lua/gitsigns/config.lua
index d5b57d4..597adcb 100644
--- a/lua/gitsigns/config.lua
+++ b/lua/gitsigns/config.lua
@@ -1,127 +1,48 @@
 local warn
 do
-
-   local ok, ret = pcall(require, 'gitsigns.message')
-   if ok then
-      warn = ret.warn
-   end
+    local ok, ret = pcall(require, 'gitsigns.message')
+    if ok then
+        warn = ret.warn
+    end
 end
 
-local SchemaElem = {Deprecated = {}, }
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-local M = {Config = {DiffOpts = {}, SignsConfig = {}, watch_gitdir = {}, current_line_blame_formatter_opts = {}, current_line_blame_opts = {}, yadm = {}, }, }
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
+local SchemaElem = { Deprecated = {} }
+
+local M = {
+    Config = {
+        DiffOpts = {},
+        SignsConfig = {},
+        watch_gitdir = {},
+        current_line_blame_formatter_opts = {},
+        current_line_blame_opts = {},
+        yadm = {},
+    },
+}
 
 M.config = {}
 
 M.schema = {
-   signs = {
-      type = 'table',
-      deep_extend = true,
-      default = {
-         add = { hl = 'GitSignsAdd', text = '│', numhl = 'GitSignsAddNr', linehl = 'GitSignsAddLn' },
-         change = { hl = 'GitSignsChange', text = '│', numhl = 'GitSignsChangeNr', linehl = 'GitSignsChangeLn' },
-         delete = { hl = 'GitSignsDelete', text = '_', numhl = 'GitSignsDeleteNr', linehl = 'GitSignsDeleteLn' },
-         topdelete = { hl = 'GitSignsDelete', text = '‾', numhl = 'GitSignsDeleteNr', linehl = 'GitSignsDeleteLn' },
-         changedelete = { hl = 'GitSignsChange', text = '~', numhl = 'GitSignsChangeNr', linehl = 'GitSignsChangeLn' },
-      },
-      description = [[
+    signs = {
+        type = 'table',
+        deep_extend = true,
+        default = {
+            add = { hl = 'GitSignsAdd', text = '│', numhl = 'GitSignsAddNr', linehl = 'GitSignsAddLn' },
+            change = { hl = 'GitSignsChange', text = '│', numhl = 'GitSignsChangeNr', linehl = 'GitSignsChangeLn' },
+            delete = { hl = 'GitSignsDelete', text = '_', numhl = 'GitSignsDeleteNr', linehl = 'GitSignsDeleteLn' },
+            topdelete = {
+                hl = 'GitSignsDelete',
+                text = '‾',
+                numhl = 'GitSignsDeleteNr',
+                linehl = 'GitSignsDeleteLn',
+            },
+            changedelete = {
+                hl = 'GitSignsChange',
+                text = '~',
+                numhl = 'GitSignsChangeNr',
+                linehl = 'GitSignsChangeLn',
+            },
+        },
+        description = [[
       Configuration for signs:
         • `hl` specifies the highlight group to use for the sign.
         • `text` specifies the character to use for the sign.
@@ -143,15 +64,15 @@ M.schema = {
       For example if `GitSignsAdd` is not defined but `GitGutterAdd` is defined,
       then `GitSignsAdd` will be linked to `GitGutterAdd`.
     ]],
-   },
-
-   keymaps = {
-      deprecated = {
-         message = "config.keymaps is now deprecated. Please define mappings in config.on_attach() instead.",
-      },
-      type = 'table',
-      default = {},
-      description = [[
+    },
+
+    keymaps = {
+        deprecated = {
+            message = 'config.keymaps is now deprecated. Please define mappings in config.on_attach() instead.',
+        },
+        type = 'table',
+        default = {},
+        description = [[
       Keymaps to set up when attaching to a buffer.
 
       Each key in the table defines the mode and key (whitespace delimited)
@@ -166,12 +87,12 @@ M.schema = {
       to `{}`, and |gitsigns-config-on_attach| can instead be used to define
       mappings.
     ]],
-   },
+    },
 
-   on_attach = {
-      type = 'function',
-      default = nil,
-      description = [[
+    on_attach = {
+        type = 'function',
+        default = nil,
+        description = [[
       Callback called when attaching to a buffer. Mainly used to setup keymaps
       when `config.keymaps` is empty. The buffer number is passed as the first
       argument.
@@ -191,15 +112,15 @@ M.schema = {
         end
 <
     ]],
-   },
-
-   watch_gitdir = {
-      type = 'table',
-      default = {
-         interval = 1000,
-         follow_files = true,
-      },
-      description = [[
+    },
+
+    watch_gitdir = {
+        type = 'table',
+        default = {
+            interval = 1000,
+            follow_files = true,
+        },
+        description = [[
       When opening a file, a libuv watcher is placed on the respective
       `.git` directory to detect when changes happen to use as a trigger to
       update signs.
@@ -211,91 +132,90 @@ M.schema = {
         • `follow_files`:
             If a file is moved with `git mv`, switch the buffer to the new location.
     ]],
-   },
+    },
 
-   sign_priority = {
-      type = 'number',
-      default = 6,
-      description = [[
+    sign_priority = {
+        type = 'number',
+        default = 6,
+        description = [[
       Priority to use for signs.
     ]],
-   },
+    },
 
-   signcolumn = {
-      type = 'boolean',
-      default = true,
-      description = [[
+    signcolumn = {
+        type = 'boolean',
+        default = true,
+        description = [[
       Enable/disable symbols in the sign column.
 
       When enabled the highlights defined in `signs.*.hl` and symbols defined
       in `signs.*.text` are used.
     ]],
-   },
+    },
 
-   numhl = {
-      type = 'boolean',
-      default = false,
-      description = [[
+    numhl = {
+        type = 'boolean',
+        default = false,
+        description = [[
       Enable/disable line number highlights.
 
       When enabled the highlights defined in `signs.*.numhl` are used. If
       the highlight group does not exist, then it is automatically defined
       and linked to the corresponding highlight group in `signs.*.hl`.
     ]],
-   },
+    },
 
-   linehl = {
-      type = 'boolean',
-      default = false,
-      description = [[
+    linehl = {
+        type = 'boolean',
+        default = false,
+        description = [[
       Enable/disable line highlights.
 
       When enabled the highlights defined in `signs.*.linehl` are used. If
       the highlight group does not exist, then it is automatically defined
       and linked to the corresponding highlight group in `signs.*.hl`.
     ]],
-   },
+    },
 
-   show_deleted = {
-      type = 'boolean',
-      default = false,
-      description = [[
+    show_deleted = {
+        type = 'boolean',
+        default = false,
+        description = [[
       Show the old version of hunks inline in the buffer (via virtual lines).
 
       Note: Virtual lines currently use the highlight `GitSignsDeleteLn`.
     ]],
-   },
-
-   diff_opts = {
-      type = 'table',
-      deep_extend = true,
-      default = function()
-         local r = {
-            algorithm = 'myers',
-            internal = false,
-            indent_heuristic = false,
-            vertical = true,
-         }
-         for _, o in ipairs(vim.opt.diffopt:get()) do
-            if o == 'indent-heuristic' then
-               r.indent_heuristic = true
-            elseif o == 'internal' then
-               if vim.diff then
-                  r.internal = true
-               elseif jit and jit.os ~= "Windows" then
-
-                  r.internal = true
-               end
-            elseif o == 'horizontal' then
-               r.vertical = false
-            elseif vim.startswith(o, 'algorithm:') then
-               r.algorithm = string.sub(o, 11)
+    },
+
+    diff_opts = {
+        type = 'table',
+        deep_extend = true,
+        default = function()
+            local r = {
+                algorithm = 'myers',
+                internal = false,
+                indent_heuristic = false,
+                vertical = true,
+            }
+            for _, o in ipairs(vim.opt.diffopt:get()) do
+                if o == 'indent-heuristic' then
+                    r.indent_heuristic = true
+                elseif o == 'internal' then
+                    if vim.diff then
+                        r.internal = true
+                    elseif jit and jit.os ~= 'Windows' then
+                        r.internal = true
+                    end
+                elseif o == 'horizontal' then
+                    r.vertical = false
+                elseif vim.startswith(o, 'algorithm:') then
+                    r.algorithm = string.sub(o, 11)
+                end
             end
-         end
-         return r
-      end,
-      default_help = "derived from 'diffopt'",
-      description = [[
+            return r
+        end,
+        default_help = "derived from 'diffopt'",
+        description = [[
       Diff options.
 
       Fields: ~
@@ -317,33 +237,33 @@ M.schema = {
         • vertical: boolean
             Start diff mode with vertical splits.
     ]],
-   },
+    },
 
-   base = {
-      type = 'string',
-      default = nil,
-      default_help = 'index',
-      description = [[
+    base = {
+        type = 'string',
+        default = nil,
+        default_help = 'index',
+        description = [[
       The object/revision to diff against.
       See |gitsigns-revision|.
     ]],
-   },
-
-   count_chars = {
-      type = 'table',
-      default = {
-         [1] = '1',
-         [2] = '2',
-         [3] = '3',
-         [4] = '4',
-         [5] = '5',
-         [6] = '6',
-         [7] = '7',
-         [8] = '8',
-         [9] = '9',
-         ['+'] = '>',
-      },
-      description = [[
+    },
+
+    count_chars = {
+        type = 'table',
+        default = {
+            [1] = '1',
+            [2] = '2',
+            [3] = '3',
+            [4] = '4',
+            [5] = '5',
+            [6] = '6',
+            [7] = '7',
+            [8] = '8',
+            [9] = '9',
+            ['+'] = '>',
+        },
+        description = [[
       The count characters used when `signs.*.show_count` is enabled. The
       `+` entry is used as a fallback. With the default, any count outside
       of 1-9 uses the `>` character in the sign.
@@ -352,19 +272,25 @@ M.schema = {
         • to specify unicode characters for the counts instead of 1-9.
         • to define characters to be used for counts greater than 9.
     ]],
-   },
-
-   status_formatter = {
-      type = 'function',
-      default = function(status)
-         local added, changed, removed = status.added, status.changed, status.removed
-         local status_txt = {}
-         if added and added > 0 then table.insert(status_txt, '+' .. added) end
-         if changed and changed > 0 then table.insert(status_txt, '~' .. changed) end
-         if removed and removed > 0 then table.insert(status_txt, '-' .. removed) end
-         return table.concat(status_txt, ' ')
-      end,
-      default_help = [[function(status)
+    },
+
+    status_formatter = {
+        type = 'function',
+        default = function(status)
+            local added, changed, removed = status.added, status.changed, status.removed
+            local status_txt = {}
+            if added and added > 0 then
+                table.insert(status_txt, '+' .. added)
+            end
+            if changed and changed > 0 then
+                table.insert(status_txt, '~' .. changed)
+            end
+            if removed and removed > 0 then
+                table.insert(status_txt, '-' .. removed)
+            end
+            return table.concat(status_txt, ' ')
+        end,
+        default_help = [[function(status)
       local added, changed, removed = status.added, status.changed, status.removed
       local status_txt = {}
       if added   and added   > 0 then table.insert(status_txt, '+'..added  ) end
@@ -372,71 +298,72 @@ M.schema = {
       if removed and removed > 0 then table.insert(status_txt, '-'..removed) end
       return table.concat(status_txt, ' ')
     end]],
-      description = [[
+        description = [[
       Function used to format `b:gitsigns_status`.
     ]],
-   },
+    },
 
-   max_file_length = {
-      type = 'number',
-      default = 40000,
-      description = [[
+    max_file_length = {
+        type = 'number',
+        default = 40000,
+        description = [[
       Max file length to attach to.
     ]],
-   },
-
-   preview_config = {
-      type = 'table',
-      deep_extend = true,
-      default = {
-         border = 'single',
-         style = 'minimal',
-         relative = 'cursor',
-         row = 0,
-         col = 1,
-      },
-      description = [[
+    },
+
+    preview_config = {
+        type = 'table',
+        deep_extend = true,
+        default = {
+            border = 'single',
+            style = 'minimal',
+            relative = 'cursor',
+            row = 0,
+            col = 1,
+        },
+        description = [[
       Option overrides for the Gitsigns preview window. Table is passed directly
       to `nvim_open_win`.
     ]],
-   },
+    },
 
-   attach_to_untracked = {
-      type = 'boolean',
-      default = true,
-      description = [[
+    attach_to_untracked = {
+        type = 'boolean',
+        default = true,
+        description = [[
       Attach to untracked files.
     ]],
-   },
+    },
 
-   update_debounce = {
-      type = 'number',
-      default = 100,
-      description = [[
+    update_debounce = {
+        type = 'number',
+        default = 100,
+        description = [[
       Debounce time for updates (in milliseconds).
     ]],
-   },
+    },
 
-   current_line_blame = {
-      type = 'boolean',
-      default = false,
-      description = [[
+    current_line_blame = {
+        type = 'boolean',
+        default = false,
+        description = [[
       Adds an unobtrusive and customisable blame annotation at the end of
       the current line.
 
       The highlight group used for the text is `GitSignsCurrentLineBlame`.
     ]],
-   },
-
-   current_line_blame_opts = {
-      type = 'table',
-      deep_extend = true,
-      default = {
-         virt_text = true,
-         virt_text_pos = 'eol',
-         delay = 1000,
-      },
-      description = [[
+    },
+
+    current_line_blame_opts = {
+        type = 'table',
+        deep_extend = true,
+        default = {
+            virt_text = true,
+            virt_text_pos = 'eol',
+            delay = 1000,
+            insert_mode = true,
+        },
+        description = [[
       Options for the current line blame annotation.
 
       Fields: ~
@@ -454,27 +381,27 @@ M.schema = {
         • ignore_whitespace: boolean
           Ignore whitespace when running blame.
     ]],
-   },
-
-   current_line_blame_formatter_opts = {
-      type = 'table',
-      deep_extend = true,
-      deprecated = true,
-      default = {
-         relative_time = false,
-      },
-      description = [[
+    },
+
+    current_line_blame_formatter_opts = {
+        type = 'table',
+        deep_extend = true,
+        deprecated = true,
+        default = {
+            relative_time = false,
+        },
+        description = [[
       Options for the current line blame annotation formatter.
 
       Fields: ~
         • relative_time: boolean
     ]],
-   },
+    },
 
-   current_line_blame_formatter = {
-      type = { 'string', 'function' },
-      default = ' <author>, <author_time> - <summary>',
-      description = [[
+    current_line_blame_formatter = {
+        type = { 'string', 'function' },
+        default = ' <author>, <author_time> - <summary>',
+        description = [[
       String or function used to format the virtual text of
       |gitsigns-config-current_line_blame|.
 
@@ -549,49 +476,49 @@ M.schema = {
           field of |nvim_buf_set_extmark| and thus must be a list of
           [text, highlight] tuples.
     ]],
-   },
-
-   trouble = {
-      type = 'boolean',
-      default = function()
-         local has_trouble = pcall(require, 'trouble')
-         return has_trouble
-      end,
-      default_help = "true if installed",
-      description = [[
+    },
+
+    trouble = {
+        type = 'boolean',
+        default = function()
+            local has_trouble = pcall(require, 'trouble')
+            return has_trouble
+        end,
+        default_help = 'true if installed',
+        description = [[
       When using setqflist() or setloclist(), open Trouble instead of the
       quickfix/location list window.
     ]],
-   },
+    },
 
-   yadm = {
-      type = 'table',
-      default = { enable = false },
-      description = [[
+    yadm = {
+        type = 'table',
+        default = { enable = false },
+        description = [[
       yadm configuration.
     ]],
-   },
+    },
 
-   _git_version = {
-      type = 'string',
-      default = 'auto',
-      description = [[
+    _git_version = {
+        type = 'string',
+        default = 'auto',
+        description = [[
       Version of git available. Set to 'auto' to automatically detect.
     ]],
-   },
+    },
 
-   _verbose = {
-      type = 'boolean',
-      default = false,
-      description = [[
+    _verbose = {
+        type = 'boolean',
+        default = false,
+        description = [[
       More verbose debug message. Requires debug_mode=true.
     ]],
-   },
+    },
 
-   word_diff = {
-      type = 'boolean',
-      default = false,
-      description = [[
+    word_diff = {
+        type = 'boolean',
+        default = false,
+        description = [[
       Highlight intra-line word differences in the buffer.
       Requires `config.diff_opts.internal = true` .
 
@@ -609,122 +536,122 @@ M.schema = {
           • `GitSignsChangeVirtLnInline`
           • `GitSignsDeleteVirtLnInline`
     ]],
-   },
+    },
 
-   _refresh_staged_on_update = {
-      type = 'boolean',
-      default = true,
-      description = [[
+    _refresh_staged_on_update = {
+        type = 'boolean',
+        default = true,
+        description = [[
       Always refresh the staged file on each update. Disabling this will cause
       the staged file to only be refreshed when an update to the index is
       detected.
     ]],
-   },
+    },
 
-   _blame_cache = {
-      type = 'boolean',
-      default = true,
-      description = [[
+    _blame_cache = {
+        type = 'boolean',
+        default = true,
+        description = [[
       Cache blame results for current_line_blame
     ]],
-   },
+    },
 
-   debug_mode = {
-      type = 'boolean',
-      default = false,
-      description = [[
+    debug_mode = {
+        type = 'boolean',
+        default = false,
+        description = [[
       Enables debug logging and makes the following functions
       available: `dump_cache`, `debug_messages`, `clear_debug`.
     ]],
-   },
-
-   watch_index = { deprecated = { hard = true, new_field = 'watch_gitdir' } },
-   current_line_blame_delay = { deprecated = { hard = true, new_field = 'current_line_blame_opts.delay' } },
-   current_line_blame_position = { deprecated = { hard = true, new_field = 'current_line_blame_opts.virt_text_pos' } },
-   diff_algorithm = { deprecated = { hard = true, new_field = 'diff_opts.algorithm' } },
-   use_decoration_api = { deprecated = { hard = true } },
-   use_internal_diff = { deprecated = { hard = true, new_field = 'diff_opts.internal' } },
+    },
+
+    watch_index = { deprecated = { hard = true, new_field = 'watch_gitdir' } },
+    current_line_blame_delay = { deprecated = { hard = true, new_field = 'current_line_blame_opts.delay' } },
+    current_line_blame_position = {
+        deprecated = { hard = true, new_field = 'current_line_blame_opts.virt_text_pos' },
+    },
+    diff_algorithm = { deprecated = { hard = true, new_field = 'diff_opts.algorithm' } },
+    use_decoration_api = { deprecated = { hard = true } },
+    use_internal_diff = { deprecated = { hard = true, new_field = 'diff_opts.internal' } },
 }
 
 warn = function(s, ...)
-   vim.notify(s:format(...), vim.log.levels.WARN, { title = 'gitsigns' })
+    vim.notify(s:format(...), vim.log.levels.WARN, { title = 'gitsigns' })
 end
 
 local function validate_config(config)
-   for k, v in pairs(config) do
-      local kschema = M.schema[k]
-      if kschema == nil then
-         warn("gitsigns: Ignoring invalid configuration field '%s'", k)
-      elseif kschema.type then
-         if type(kschema.type) == 'string' then
-            vim.validate({
-               [k] = { v, kschema.type },
-            })
-         end
-      end
-   end
+    for k, v in pairs(config) do
+        local kschema = M.schema[k]
+        if kschema == nil then
+            warn("gitsigns: Ignoring invalid configuration field '%s'", k)
+        elseif kschema.type then
+            if type(kschema.type) == 'string' then
+                vim.validate {
+                    [k] = { v, kschema.type },
+                }
+            end
+        end
+    end
 end
 
 local function resolve_default(v)
-   if type(v.default) == 'function' and v.type ~= 'function' then
-      return (v.default)()
-   else
-      return v.default
-   end
+    if type(v.default) == 'function' and v.type ~= 'function' then
+        return (v.default)()
+    else
+        return v.default
+    end
 end
 
 local function handle_deprecated(cfg)
-   for k, v in pairs(M.schema) do
-      local dep = v.deprecated
-      if dep and cfg[k] ~= nil then
-         if type(dep) == "table" then
-            if dep.new_field then
-               local opts_key, field = dep.new_field:match('(.*)%.(.*)')
-               if opts_key and field then
-
-                  local opts = (cfg[opts_key] or {})
-                  opts[field] = cfg[k]
-                  cfg[opts_key] = opts
-               else
-
-                  cfg[dep.new_field] = cfg[k]
-               end
-            end
-
-            if dep.hard then
-               if dep.message then
-                  warn(dep.message)
-               elseif dep.new_field then
-                  warn('%s is now deprecated, please use %s', k, dep.new_field)
-               else
-                  warn('%s is now deprecated; ignoring', k)
-               end
+    for k, v in pairs(M.schema) do
+        local dep = v.deprecated
+        if dep and cfg[k] ~= nil then
+            if type(dep) == 'table' then
+                if dep.new_field then
+                    local opts_key, field = dep.new_field:match '(.*)%.(.*)'
+                    if opts_key and field then
+                        local opts = (cfg[opts_key] or {})
+                        opts[field] = cfg[k]
+                        cfg[opts_key] = opts
+                    else
+                        cfg[dep.new_field] = cfg[k]
+                    end
+                end
+
+                if dep.hard then
+                    if dep.message then
+                        warn(dep.message)
+                    elseif dep.new_field then
+                        warn('%s is now deprecated, please use %s', k, dep.new_field)
+                    else
+                        warn('%s is now deprecated; ignoring', k)
+                    end
+                end
             end
-         end
-      end
-   end
+        end
+    end
 end
 
 function M.build(user_config)
-   user_config = user_config or {}
-
-   handle_deprecated(user_config)
-
-   validate_config(user_config)
-
-   local config = M.config
-   for k, v in pairs(M.schema) do
-      if user_config[k] ~= nil then
-         if v.deep_extend then
-            local d = resolve_default(v)
-            config[k] = vim.tbl_deep_extend('force', d, user_config[k])
-         else
-            config[k] = user_config[k]
-         end
-      else
-         config[k] = resolve_default(v)
-      end
-   end
+    user_config = user_config or {}
+
+    handle_deprecated(user_config)
+
+    validate_config(user_config)
+
+    local config = M.config
+    for k, v in pairs(M.schema) do
+        if user_config[k] ~= nil then
+            if v.deep_extend then
+                local d = resolve_default(v)
+                config[k] = vim.tbl_deep_extend('force', d, user_config[k])
+            else
+                config[k] = user_config[k]
+            end
+        else
+            config[k] = resolve_default(v)
+        end
+    end
 end
 
 return M
diff --git a/lua/gitsigns/current_line_blame.lua b/lua/gitsigns/current_line_blame.lua
index 11ee944..eecf0c4 100644
--- a/lua/gitsigns/current_line_blame.lua
+++ b/lua/gitsigns/current_line_blame.lua
@@ -80,9 +80,6 @@ end
 
 local function expand_blame_format(fmt, name, info)
    local m
-   if info.author == name then
-      info.author = 'You'
-   end
 
    if info.author == 'Not Committed Yet' then
       return info.author
@@ -207,14 +204,23 @@ M.setup = function()
    end
 
    if config.current_line_blame then
-      nvim.autocmd(
-      { 'FocusGained', 'BufEnter', 'CursorMoved', 'CursorMovedI' },
-      { group = 'gitsigns_blame', callback = function() update() end })
-
-
-      nvim.autocmd(
-      { 'FocusLost', 'BufLeave' },
-      { group = 'gitsigns_blame', callback = function() reset() end })
+     if config.current_line_blame_opts.insert_mode then
+       nvim.autocmd(
+       { 'FocusGained', 'BufEnter', 'CursorMoved', 'CursorMovedI' },
+       { group = 'gitsigns_blame', callback = function() update() end })
+
+       nvim.autocmd(
+       { 'FocusLost', 'BufLeave' },
+       { group = 'gitsigns_blame', callback = function() reset() end })
+     else
+       nvim.autocmd(
+       { 'FocusGained', 'BufEnter', 'CursorMoved', 'InsertLeave' },
+       { group = 'gitsigns_blame', callback = function() update() end })
+
+       nvim.autocmd(
+       { 'FocusLost', 'BufLeave', 'InsertEnter' },
+       { group = 'gitsigns_blame', callback = function() reset() end })
+     end
 
 
       update()
diff --git a/teal/gitsigns/current_line_blame.tl b/teal/gitsigns/current_line_blame.tl
index 4a17e1e..9df90b5 100644
--- a/teal/gitsigns/current_line_blame.tl
+++ b/teal/gitsigns/current_line_blame.tl
@@ -80,9 +80,6 @@ end
 
 local function expand_blame_format(fmt: string, name: string, info: BlameInfo): string
   local m: string
-  if info.author == name then
-    info.author = 'You'
-  end
 
   if info.author == 'Not Committed Yet' then
     return info.author
